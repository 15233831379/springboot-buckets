package com.javaniuniu.generator.domain.example;

import com.javaniuniu.generator.domain.InfoDetail;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class InfoDetailExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    protected Integer offset;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    protected Integer rows;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public InfoDetailExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public InfoDetailExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public InfoDetailExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
        rows = null;
        offset = null;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public void setOffset(Integer offset) {
        this.offset = offset;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public Integer getOffset() {
        return this.offset;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public void setRows(Integer rows) {
        this.rows = rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public Integer getRows() {
        return this.rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public InfoDetailExample limit(Integer rows) {
        this.rows = rows;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public InfoDetailExample limit(Integer offset, Integer rows) {
        this.offset = offset;
        this.rows = rows;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public InfoDetailExample page(Integer page, Integer pageSize) {
        this.offset = page * pageSize;
        this.rows = pageSize;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        InfoDetailExample example = new InfoDetailExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public InfoDetailExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public InfoDetailExample when(boolean condition, IExampleWhen then, IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andInfoIdIsNull() {
            addCriterion("info_id is null");
            return (Criteria) this;
        }

        public Criteria andInfoIdIsNotNull() {
            addCriterion("info_id is not null");
            return (Criteria) this;
        }

        public Criteria andInfoIdEqualTo(String value) {
            addCriterion("info_id =", value, "infoId");
            return (Criteria) this;
        }

        public Criteria andInfoIdEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("info_id = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andInfoIdNotEqualTo(String value) {
            addCriterion("info_id <>", value, "infoId");
            return (Criteria) this;
        }

        public Criteria andInfoIdNotEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("info_id <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andInfoIdGreaterThan(String value) {
            addCriterion("info_id >", value, "infoId");
            return (Criteria) this;
        }

        public Criteria andInfoIdGreaterThanColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("info_id > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andInfoIdGreaterThanOrEqualTo(String value) {
            addCriterion("info_id >=", value, "infoId");
            return (Criteria) this;
        }

        public Criteria andInfoIdGreaterThanOrEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("info_id >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andInfoIdLessThan(String value) {
            addCriterion("info_id <", value, "infoId");
            return (Criteria) this;
        }

        public Criteria andInfoIdLessThanColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("info_id < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andInfoIdLessThanOrEqualTo(String value) {
            addCriterion("info_id <=", value, "infoId");
            return (Criteria) this;
        }

        public Criteria andInfoIdLessThanOrEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("info_id <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andInfoIdLike(String value) {
            addCriterion("info_id like", value, "infoId");
            return (Criteria) this;
        }

        public Criteria andInfoIdNotLike(String value) {
            addCriterion("info_id not like", value, "infoId");
            return (Criteria) this;
        }

        public Criteria andInfoIdIn(List<String> values) {
            addCriterion("info_id in", values, "infoId");
            return (Criteria) this;
        }

        public Criteria andInfoIdNotIn(List<String> values) {
            addCriterion("info_id not in", values, "infoId");
            return (Criteria) this;
        }

        public Criteria andInfoIdBetween(String value1, String value2) {
            addCriterion("info_id between", value1, value2, "infoId");
            return (Criteria) this;
        }

        public Criteria andInfoIdNotBetween(String value1, String value2) {
            addCriterion("info_id not between", value1, value2, "infoId");
            return (Criteria) this;
        }

        public Criteria andUsernameIsNull() {
            addCriterion("username is null");
            return (Criteria) this;
        }

        public Criteria andUsernameIsNotNull() {
            addCriterion("username is not null");
            return (Criteria) this;
        }

        public Criteria andUsernameEqualTo(String value) {
            addCriterion("username =", value, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("username = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUsernameNotEqualTo(String value) {
            addCriterion("username <>", value, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameNotEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("username <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUsernameGreaterThan(String value) {
            addCriterion("username >", value, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameGreaterThanColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("username > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUsernameGreaterThanOrEqualTo(String value) {
            addCriterion("username >=", value, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameGreaterThanOrEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("username >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUsernameLessThan(String value) {
            addCriterion("username <", value, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameLessThanColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("username < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUsernameLessThanOrEqualTo(String value) {
            addCriterion("username <=", value, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameLessThanOrEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("username <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUsernameLike(String value) {
            addCriterion("username like", value, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameNotLike(String value) {
            addCriterion("username not like", value, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameIn(List<String> values) {
            addCriterion("username in", values, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameNotIn(List<String> values) {
            addCriterion("username not in", values, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameBetween(String value1, String value2) {
            addCriterion("username between", value1, value2, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameNotBetween(String value1, String value2) {
            addCriterion("username not between", value1, value2, "username");
            return (Criteria) this;
        }

        public Criteria andCheckedDateIsNull() {
            addCriterion("checked_date is null");
            return (Criteria) this;
        }

        public Criteria andCheckedDateIsNotNull() {
            addCriterion("checked_date is not null");
            return (Criteria) this;
        }

        public Criteria andCheckedDateEqualTo(LocalDateTime value) {
            addCriterion("checked_date =", value, "checkedDate");
            return (Criteria) this;
        }

        public Criteria andCheckedDateEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("checked_date = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCheckedDateNotEqualTo(LocalDateTime value) {
            addCriterion("checked_date <>", value, "checkedDate");
            return (Criteria) this;
        }

        public Criteria andCheckedDateNotEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("checked_date <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCheckedDateGreaterThan(LocalDateTime value) {
            addCriterion("checked_date >", value, "checkedDate");
            return (Criteria) this;
        }

        public Criteria andCheckedDateGreaterThanColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("checked_date > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCheckedDateGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("checked_date >=", value, "checkedDate");
            return (Criteria) this;
        }

        public Criteria andCheckedDateGreaterThanOrEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("checked_date >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCheckedDateLessThan(LocalDateTime value) {
            addCriterion("checked_date <", value, "checkedDate");
            return (Criteria) this;
        }

        public Criteria andCheckedDateLessThanColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("checked_date < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCheckedDateLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("checked_date <=", value, "checkedDate");
            return (Criteria) this;
        }

        public Criteria andCheckedDateLessThanOrEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("checked_date <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCheckedDateIn(List<LocalDateTime> values) {
            addCriterion("checked_date in", values, "checkedDate");
            return (Criteria) this;
        }

        public Criteria andCheckedDateNotIn(List<LocalDateTime> values) {
            addCriterion("checked_date not in", values, "checkedDate");
            return (Criteria) this;
        }

        public Criteria andCheckedDateBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("checked_date between", value1, value2, "checkedDate");
            return (Criteria) this;
        }

        public Criteria andCheckedDateNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("checked_date not between", value1, value2, "checkedDate");
            return (Criteria) this;
        }

        public Criteria andSolveNumIsNull() {
            addCriterion("solve_num is null");
            return (Criteria) this;
        }

        public Criteria andSolveNumIsNotNull() {
            addCriterion("solve_num is not null");
            return (Criteria) this;
        }

        public Criteria andSolveNumEqualTo(Integer value) {
            addCriterion("solve_num =", value, "solveNum");
            return (Criteria) this;
        }

        public Criteria andSolveNumEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("solve_num = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSolveNumNotEqualTo(Integer value) {
            addCriterion("solve_num <>", value, "solveNum");
            return (Criteria) this;
        }

        public Criteria andSolveNumNotEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("solve_num <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSolveNumGreaterThan(Integer value) {
            addCriterion("solve_num >", value, "solveNum");
            return (Criteria) this;
        }

        public Criteria andSolveNumGreaterThanColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("solve_num > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSolveNumGreaterThanOrEqualTo(Integer value) {
            addCriterion("solve_num >=", value, "solveNum");
            return (Criteria) this;
        }

        public Criteria andSolveNumGreaterThanOrEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("solve_num >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSolveNumLessThan(Integer value) {
            addCriterion("solve_num <", value, "solveNum");
            return (Criteria) this;
        }

        public Criteria andSolveNumLessThanColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("solve_num < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSolveNumLessThanOrEqualTo(Integer value) {
            addCriterion("solve_num <=", value, "solveNum");
            return (Criteria) this;
        }

        public Criteria andSolveNumLessThanOrEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("solve_num <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSolveNumIn(List<Integer> values) {
            addCriterion("solve_num in", values, "solveNum");
            return (Criteria) this;
        }

        public Criteria andSolveNumNotIn(List<Integer> values) {
            addCriterion("solve_num not in", values, "solveNum");
            return (Criteria) this;
        }

        public Criteria andSolveNumBetween(Integer value1, Integer value2) {
            addCriterion("solve_num between", value1, value2, "solveNum");
            return (Criteria) this;
        }

        public Criteria andSolveNumNotBetween(Integer value1, Integer value2) {
            addCriterion("solve_num not between", value1, value2, "solveNum");
            return (Criteria) this;
        }

        public Criteria andSubmissionNumIsNull() {
            addCriterion("submission_num is null");
            return (Criteria) this;
        }

        public Criteria andSubmissionNumIsNotNull() {
            addCriterion("submission_num is not null");
            return (Criteria) this;
        }

        public Criteria andSubmissionNumEqualTo(Integer value) {
            addCriterion("submission_num =", value, "submissionNum");
            return (Criteria) this;
        }

        public Criteria andSubmissionNumEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("submission_num = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSubmissionNumNotEqualTo(Integer value) {
            addCriterion("submission_num <>", value, "submissionNum");
            return (Criteria) this;
        }

        public Criteria andSubmissionNumNotEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("submission_num <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSubmissionNumGreaterThan(Integer value) {
            addCriterion("submission_num >", value, "submissionNum");
            return (Criteria) this;
        }

        public Criteria andSubmissionNumGreaterThanColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("submission_num > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSubmissionNumGreaterThanOrEqualTo(Integer value) {
            addCriterion("submission_num >=", value, "submissionNum");
            return (Criteria) this;
        }

        public Criteria andSubmissionNumGreaterThanOrEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("submission_num >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSubmissionNumLessThan(Integer value) {
            addCriterion("submission_num <", value, "submissionNum");
            return (Criteria) this;
        }

        public Criteria andSubmissionNumLessThanColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("submission_num < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSubmissionNumLessThanOrEqualTo(Integer value) {
            addCriterion("submission_num <=", value, "submissionNum");
            return (Criteria) this;
        }

        public Criteria andSubmissionNumLessThanOrEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("submission_num <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSubmissionNumIn(List<Integer> values) {
            addCriterion("submission_num in", values, "submissionNum");
            return (Criteria) this;
        }

        public Criteria andSubmissionNumNotIn(List<Integer> values) {
            addCriterion("submission_num not in", values, "submissionNum");
            return (Criteria) this;
        }

        public Criteria andSubmissionNumBetween(Integer value1, Integer value2) {
            addCriterion("submission_num between", value1, value2, "submissionNum");
            return (Criteria) this;
        }

        public Criteria andSubmissionNumNotBetween(Integer value1, Integer value2) {
            addCriterion("submission_num not between", value1, value2, "submissionNum");
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumIsNull() {
            addCriterion("last_year_checked_num is null");
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumIsNotNull() {
            addCriterion("last_year_checked_num is not null");
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumEqualTo(Integer value) {
            addCriterion("last_year_checked_num =", value, "lastYearCheckedNum");
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("last_year_checked_num = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumNotEqualTo(Integer value) {
            addCriterion("last_year_checked_num <>", value, "lastYearCheckedNum");
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumNotEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("last_year_checked_num <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumGreaterThan(Integer value) {
            addCriterion("last_year_checked_num >", value, "lastYearCheckedNum");
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumGreaterThanColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("last_year_checked_num > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumGreaterThanOrEqualTo(Integer value) {
            addCriterion("last_year_checked_num >=", value, "lastYearCheckedNum");
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumGreaterThanOrEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("last_year_checked_num >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumLessThan(Integer value) {
            addCriterion("last_year_checked_num <", value, "lastYearCheckedNum");
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumLessThanColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("last_year_checked_num < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumLessThanOrEqualTo(Integer value) {
            addCriterion("last_year_checked_num <=", value, "lastYearCheckedNum");
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumLessThanOrEqualToColumn(InfoDetail.Column column) {
            addCriterion(new StringBuilder("last_year_checked_num <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumIn(List<Integer> values) {
            addCriterion("last_year_checked_num in", values, "lastYearCheckedNum");
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumNotIn(List<Integer> values) {
            addCriterion("last_year_checked_num not in", values, "lastYearCheckedNum");
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumBetween(Integer value1, Integer value2) {
            addCriterion("last_year_checked_num between", value1, value2, "lastYearCheckedNum");
            return (Criteria) this;
        }

        public Criteria andLastYearCheckedNumNotBetween(Integer value1, Integer value2) {
            addCriterion("last_year_checked_num not between", value1, value2, "lastYearCheckedNum");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table info_detail
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table info_detail
         *
         * @mbg.generated
         */
        private InfoDetailExample example;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table info_detail
         *
         * @mbg.generated
         */
        protected Criteria(InfoDetailExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table info_detail
         *
         * @mbg.generated
         */
        public InfoDetailExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table info_detail
         *
         * @mbg.generated
         */
        @Deprecated
        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table info_detail
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table info_detail
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then, ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }

        @Deprecated
        public interface ICriteriaAdd {
            /**
             * This method was generated by MyBatis Generator.
             * This method corresponds to the database table info_detail
             *
             * @mbg.generated
             */
            Criteria add(Criteria add);
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table info_detail
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public interface ICriteriaWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table info_detail
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);
    }

    public interface IExampleWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table info_detail
         *
         * @mbg.generated
         */
        void example(com.javaniuniu.generator.domain.example.InfoDetailExample example);
    }
}
package com.javaniuniu.generator.domain.example;

import com.javaniuniu.generator.domain.Problem;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class ProblemExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table problem
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table problem
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table problem
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table problem
     *
     * @mbg.generated
     */
    protected Integer offset;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table problem
     *
     * @mbg.generated
     */
    protected Integer rows;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public ProblemExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public ProblemExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public ProblemExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
        rows = null;
        offset = null;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public void setOffset(Integer offset) {
        this.offset = offset;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public Integer getOffset() {
        return this.offset;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public void setRows(Integer rows) {
        this.rows = rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public Integer getRows() {
        return this.rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public ProblemExample limit(Integer rows) {
        this.rows = rows;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public ProblemExample limit(Integer offset, Integer rows) {
        this.offset = offset;
        this.rows = rows;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public ProblemExample page(Integer page, Integer pageSize) {
        this.offset = page * pageSize;
        this.rows = pageSize;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        ProblemExample example = new ProblemExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public ProblemExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table problem
     *
     * @mbg.generated
     */
    public ProblemExample when(boolean condition, IExampleWhen then, IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table problem
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andProblemIdIsNull() {
            addCriterion("problem_id is null");
            return (Criteria) this;
        }

        public Criteria andProblemIdIsNotNull() {
            addCriterion("problem_id is not null");
            return (Criteria) this;
        }

        public Criteria andProblemIdEqualTo(Integer value) {
            addCriterion("problem_id =", value, "problemId");
            return (Criteria) this;
        }

        public Criteria andProblemIdEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_id = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemIdNotEqualTo(Integer value) {
            addCriterion("problem_id <>", value, "problemId");
            return (Criteria) this;
        }

        public Criteria andProblemIdNotEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_id <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemIdGreaterThan(Integer value) {
            addCriterion("problem_id >", value, "problemId");
            return (Criteria) this;
        }

        public Criteria andProblemIdGreaterThanColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_id > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("problem_id >=", value, "problemId");
            return (Criteria) this;
        }

        public Criteria andProblemIdGreaterThanOrEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_id >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemIdLessThan(Integer value) {
            addCriterion("problem_id <", value, "problemId");
            return (Criteria) this;
        }

        public Criteria andProblemIdLessThanColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_id < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemIdLessThanOrEqualTo(Integer value) {
            addCriterion("problem_id <=", value, "problemId");
            return (Criteria) this;
        }

        public Criteria andProblemIdLessThanOrEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_id <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemIdIn(List<Integer> values) {
            addCriterion("problem_id in", values, "problemId");
            return (Criteria) this;
        }

        public Criteria andProblemIdNotIn(List<Integer> values) {
            addCriterion("problem_id not in", values, "problemId");
            return (Criteria) this;
        }

        public Criteria andProblemIdBetween(Integer value1, Integer value2) {
            addCriterion("problem_id between", value1, value2, "problemId");
            return (Criteria) this;
        }

        public Criteria andProblemIdNotBetween(Integer value1, Integer value2) {
            addCriterion("problem_id not between", value1, value2, "problemId");
            return (Criteria) this;
        }

        public Criteria andProblemIndexIsNull() {
            addCriterion("problem_index is null");
            return (Criteria) this;
        }

        public Criteria andProblemIndexIsNotNull() {
            addCriterion("problem_index is not null");
            return (Criteria) this;
        }

        public Criteria andProblemIndexEqualTo(Integer value) {
            addCriterion("problem_index =", value, "problemIndex");
            return (Criteria) this;
        }

        public Criteria andProblemIndexEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_index = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemIndexNotEqualTo(Integer value) {
            addCriterion("problem_index <>", value, "problemIndex");
            return (Criteria) this;
        }

        public Criteria andProblemIndexNotEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_index <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemIndexGreaterThan(Integer value) {
            addCriterion("problem_index >", value, "problemIndex");
            return (Criteria) this;
        }

        public Criteria andProblemIndexGreaterThanColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_index > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemIndexGreaterThanOrEqualTo(Integer value) {
            addCriterion("problem_index >=", value, "problemIndex");
            return (Criteria) this;
        }

        public Criteria andProblemIndexGreaterThanOrEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_index >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemIndexLessThan(Integer value) {
            addCriterion("problem_index <", value, "problemIndex");
            return (Criteria) this;
        }

        public Criteria andProblemIndexLessThanColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_index < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemIndexLessThanOrEqualTo(Integer value) {
            addCriterion("problem_index <=", value, "problemIndex");
            return (Criteria) this;
        }

        public Criteria andProblemIndexLessThanOrEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_index <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemIndexIn(List<Integer> values) {
            addCriterion("problem_index in", values, "problemIndex");
            return (Criteria) this;
        }

        public Criteria andProblemIndexNotIn(List<Integer> values) {
            addCriterion("problem_index not in", values, "problemIndex");
            return (Criteria) this;
        }

        public Criteria andProblemIndexBetween(Integer value1, Integer value2) {
            addCriterion("problem_index between", value1, value2, "problemIndex");
            return (Criteria) this;
        }

        public Criteria andProblemIndexNotBetween(Integer value1, Integer value2) {
            addCriterion("problem_index not between", value1, value2, "problemIndex");
            return (Criteria) this;
        }

        public Criteria andProblemDateIsNull() {
            addCriterion("problem_date is null");
            return (Criteria) this;
        }

        public Criteria andProblemDateIsNotNull() {
            addCriterion("problem_date is not null");
            return (Criteria) this;
        }

        public Criteria andProblemDateEqualTo(LocalDate value) {
            addCriterion("problem_date =", value, "problemDate");
            return (Criteria) this;
        }

        public Criteria andProblemDateEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_date = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemDateNotEqualTo(LocalDate value) {
            addCriterion("problem_date <>", value, "problemDate");
            return (Criteria) this;
        }

        public Criteria andProblemDateNotEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_date <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemDateGreaterThan(LocalDate value) {
            addCriterion("problem_date >", value, "problemDate");
            return (Criteria) this;
        }

        public Criteria andProblemDateGreaterThanColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_date > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemDateGreaterThanOrEqualTo(LocalDate value) {
            addCriterion("problem_date >=", value, "problemDate");
            return (Criteria) this;
        }

        public Criteria andProblemDateGreaterThanOrEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_date >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemDateLessThan(LocalDate value) {
            addCriterion("problem_date <", value, "problemDate");
            return (Criteria) this;
        }

        public Criteria andProblemDateLessThanColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_date < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemDateLessThanOrEqualTo(LocalDate value) {
            addCriterion("problem_date <=", value, "problemDate");
            return (Criteria) this;
        }

        public Criteria andProblemDateLessThanOrEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("problem_date <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andProblemDateIn(List<LocalDate> values) {
            addCriterion("problem_date in", values, "problemDate");
            return (Criteria) this;
        }

        public Criteria andProblemDateNotIn(List<LocalDate> values) {
            addCriterion("problem_date not in", values, "problemDate");
            return (Criteria) this;
        }

        public Criteria andProblemDateBetween(LocalDate value1, LocalDate value2) {
            addCriterion("problem_date between", value1, value2, "problemDate");
            return (Criteria) this;
        }

        public Criteria andProblemDateNotBetween(LocalDate value1, LocalDate value2) {
            addCriterion("problem_date not between", value1, value2, "problemDate");
            return (Criteria) this;
        }

        public Criteria andCnNameIsNull() {
            addCriterion("cn_name is null");
            return (Criteria) this;
        }

        public Criteria andCnNameIsNotNull() {
            addCriterion("cn_name is not null");
            return (Criteria) this;
        }

        public Criteria andCnNameEqualTo(String value) {
            addCriterion("cn_name =", value, "cnName");
            return (Criteria) this;
        }

        public Criteria andCnNameEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("cn_name = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCnNameNotEqualTo(String value) {
            addCriterion("cn_name <>", value, "cnName");
            return (Criteria) this;
        }

        public Criteria andCnNameNotEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("cn_name <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCnNameGreaterThan(String value) {
            addCriterion("cn_name >", value, "cnName");
            return (Criteria) this;
        }

        public Criteria andCnNameGreaterThanColumn(Problem.Column column) {
            addCriterion(new StringBuilder("cn_name > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCnNameGreaterThanOrEqualTo(String value) {
            addCriterion("cn_name >=", value, "cnName");
            return (Criteria) this;
        }

        public Criteria andCnNameGreaterThanOrEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("cn_name >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCnNameLessThan(String value) {
            addCriterion("cn_name <", value, "cnName");
            return (Criteria) this;
        }

        public Criteria andCnNameLessThanColumn(Problem.Column column) {
            addCriterion(new StringBuilder("cn_name < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCnNameLessThanOrEqualTo(String value) {
            addCriterion("cn_name <=", value, "cnName");
            return (Criteria) this;
        }

        public Criteria andCnNameLessThanOrEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("cn_name <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCnNameLike(String value) {
            addCriterion("cn_name like", value, "cnName");
            return (Criteria) this;
        }

        public Criteria andCnNameNotLike(String value) {
            addCriterion("cn_name not like", value, "cnName");
            return (Criteria) this;
        }

        public Criteria andCnNameIn(List<String> values) {
            addCriterion("cn_name in", values, "cnName");
            return (Criteria) this;
        }

        public Criteria andCnNameNotIn(List<String> values) {
            addCriterion("cn_name not in", values, "cnName");
            return (Criteria) this;
        }

        public Criteria andCnNameBetween(String value1, String value2) {
            addCriterion("cn_name between", value1, value2, "cnName");
            return (Criteria) this;
        }

        public Criteria andCnNameNotBetween(String value1, String value2) {
            addCriterion("cn_name not between", value1, value2, "cnName");
            return (Criteria) this;
        }

        public Criteria andEnNameIsNull() {
            addCriterion("en_name is null");
            return (Criteria) this;
        }

        public Criteria andEnNameIsNotNull() {
            addCriterion("en_name is not null");
            return (Criteria) this;
        }

        public Criteria andEnNameEqualTo(String value) {
            addCriterion("en_name =", value, "enName");
            return (Criteria) this;
        }

        public Criteria andEnNameEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("en_name = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnNameNotEqualTo(String value) {
            addCriterion("en_name <>", value, "enName");
            return (Criteria) this;
        }

        public Criteria andEnNameNotEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("en_name <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnNameGreaterThan(String value) {
            addCriterion("en_name >", value, "enName");
            return (Criteria) this;
        }

        public Criteria andEnNameGreaterThanColumn(Problem.Column column) {
            addCriterion(new StringBuilder("en_name > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnNameGreaterThanOrEqualTo(String value) {
            addCriterion("en_name >=", value, "enName");
            return (Criteria) this;
        }

        public Criteria andEnNameGreaterThanOrEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("en_name >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnNameLessThan(String value) {
            addCriterion("en_name <", value, "enName");
            return (Criteria) this;
        }

        public Criteria andEnNameLessThanColumn(Problem.Column column) {
            addCriterion(new StringBuilder("en_name < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnNameLessThanOrEqualTo(String value) {
            addCriterion("en_name <=", value, "enName");
            return (Criteria) this;
        }

        public Criteria andEnNameLessThanOrEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("en_name <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnNameLike(String value) {
            addCriterion("en_name like", value, "enName");
            return (Criteria) this;
        }

        public Criteria andEnNameNotLike(String value) {
            addCriterion("en_name not like", value, "enName");
            return (Criteria) this;
        }

        public Criteria andEnNameIn(List<String> values) {
            addCriterion("en_name in", values, "enName");
            return (Criteria) this;
        }

        public Criteria andEnNameNotIn(List<String> values) {
            addCriterion("en_name not in", values, "enName");
            return (Criteria) this;
        }

        public Criteria andEnNameBetween(String value1, String value2) {
            addCriterion("en_name between", value1, value2, "enName");
            return (Criteria) this;
        }

        public Criteria andEnNameNotBetween(String value1, String value2) {
            addCriterion("en_name not between", value1, value2, "enName");
            return (Criteria) this;
        }

        public Criteria andCnTitleIsNull() {
            addCriterion("cn_title is null");
            return (Criteria) this;
        }

        public Criteria andCnTitleIsNotNull() {
            addCriterion("cn_title is not null");
            return (Criteria) this;
        }

        public Criteria andCnTitleEqualTo(String value) {
            addCriterion("cn_title =", value, "cnTitle");
            return (Criteria) this;
        }

        public Criteria andCnTitleEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("cn_title = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCnTitleNotEqualTo(String value) {
            addCriterion("cn_title <>", value, "cnTitle");
            return (Criteria) this;
        }

        public Criteria andCnTitleNotEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("cn_title <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCnTitleGreaterThan(String value) {
            addCriterion("cn_title >", value, "cnTitle");
            return (Criteria) this;
        }

        public Criteria andCnTitleGreaterThanColumn(Problem.Column column) {
            addCriterion(new StringBuilder("cn_title > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCnTitleGreaterThanOrEqualTo(String value) {
            addCriterion("cn_title >=", value, "cnTitle");
            return (Criteria) this;
        }

        public Criteria andCnTitleGreaterThanOrEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("cn_title >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCnTitleLessThan(String value) {
            addCriterion("cn_title <", value, "cnTitle");
            return (Criteria) this;
        }

        public Criteria andCnTitleLessThanColumn(Problem.Column column) {
            addCriterion(new StringBuilder("cn_title < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCnTitleLessThanOrEqualTo(String value) {
            addCriterion("cn_title <=", value, "cnTitle");
            return (Criteria) this;
        }

        public Criteria andCnTitleLessThanOrEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("cn_title <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCnTitleLike(String value) {
            addCriterion("cn_title like", value, "cnTitle");
            return (Criteria) this;
        }

        public Criteria andCnTitleNotLike(String value) {
            addCriterion("cn_title not like", value, "cnTitle");
            return (Criteria) this;
        }

        public Criteria andCnTitleIn(List<String> values) {
            addCriterion("cn_title in", values, "cnTitle");
            return (Criteria) this;
        }

        public Criteria andCnTitleNotIn(List<String> values) {
            addCriterion("cn_title not in", values, "cnTitle");
            return (Criteria) this;
        }

        public Criteria andCnTitleBetween(String value1, String value2) {
            addCriterion("cn_title between", value1, value2, "cnTitle");
            return (Criteria) this;
        }

        public Criteria andCnTitleNotBetween(String value1, String value2) {
            addCriterion("cn_title not between", value1, value2, "cnTitle");
            return (Criteria) this;
        }

        public Criteria andEnTitleIsNull() {
            addCriterion("en_title is null");
            return (Criteria) this;
        }

        public Criteria andEnTitleIsNotNull() {
            addCriterion("en_title is not null");
            return (Criteria) this;
        }

        public Criteria andEnTitleEqualTo(String value) {
            addCriterion("en_title =", value, "enTitle");
            return (Criteria) this;
        }

        public Criteria andEnTitleEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("en_title = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnTitleNotEqualTo(String value) {
            addCriterion("en_title <>", value, "enTitle");
            return (Criteria) this;
        }

        public Criteria andEnTitleNotEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("en_title <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnTitleGreaterThan(String value) {
            addCriterion("en_title >", value, "enTitle");
            return (Criteria) this;
        }

        public Criteria andEnTitleGreaterThanColumn(Problem.Column column) {
            addCriterion(new StringBuilder("en_title > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnTitleGreaterThanOrEqualTo(String value) {
            addCriterion("en_title >=", value, "enTitle");
            return (Criteria) this;
        }

        public Criteria andEnTitleGreaterThanOrEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("en_title >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnTitleLessThan(String value) {
            addCriterion("en_title <", value, "enTitle");
            return (Criteria) this;
        }

        public Criteria andEnTitleLessThanColumn(Problem.Column column) {
            addCriterion(new StringBuilder("en_title < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnTitleLessThanOrEqualTo(String value) {
            addCriterion("en_title <=", value, "enTitle");
            return (Criteria) this;
        }

        public Criteria andEnTitleLessThanOrEqualToColumn(Problem.Column column) {
            addCriterion(new StringBuilder("en_title <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andEnTitleLike(String value) {
            addCriterion("en_title like", value, "enTitle");
            return (Criteria) this;
        }

        public Criteria andEnTitleNotLike(String value) {
            addCriterion("en_title not like", value, "enTitle");
            return (Criteria) this;
        }

        public Criteria andEnTitleIn(List<String> values) {
            addCriterion("en_title in", values, "enTitle");
            return (Criteria) this;
        }

        public Criteria andEnTitleNotIn(List<String> values) {
            addCriterion("en_title not in", values, "enTitle");
            return (Criteria) this;
        }

        public Criteria andEnTitleBetween(String value1, String value2) {
            addCriterion("en_title between", value1, value2, "enTitle");
            return (Criteria) this;
        }

        public Criteria andEnTitleNotBetween(String value1, String value2) {
            addCriterion("en_title not between", value1, value2, "enTitle");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table problem
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table problem
         *
         * @mbg.generated
         */
        private ProblemExample example;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table problem
         *
         * @mbg.generated
         */
        protected Criteria(ProblemExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table problem
         *
         * @mbg.generated
         */
        public ProblemExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table problem
         *
         * @mbg.generated
         */
        @Deprecated
        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table problem
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table problem
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then, ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }

        @Deprecated
        public interface ICriteriaAdd {
            /**
             * This method was generated by MyBatis Generator.
             * This method corresponds to the database table problem
             *
             * @mbg.generated
             */
            Criteria add(Criteria add);
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table problem
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public interface ICriteriaWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table problem
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);
    }

    public interface IExampleWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table problem
         *
         * @mbg.generated
         */
        void example(com.javaniuniu.generator.domain.example.ProblemExample example);
    }
}